// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { Address, Bytes, ethereum, TypedMap } from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BrokerWhitelisted extends ethereum.Event {
  get params(): BrokerWhitelisted__Params {
    return new BrokerWhitelisted__Params(this);
  }
}

export class BrokerWhitelisted__Params {
  _event: BrokerWhitelisted;

  constructor(event: BrokerWhitelisted) {
    this._event = event;
  }

  get broker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAccepted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get brokerName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Cashed extends ethereum.Event {
  get params(): Cashed__Params {
    return new Cashed__Params(this);
  }
}

export class Cashed__Params {
  _event: Cashed;

  constructor(event: Cashed) {
    this._event = event;
  }

  get cheqId(): bigint {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Funded extends ethereum.Event {
  get params(): Funded__Params {
    return new Funded__Params(this);
  }
}

export class Funded__Params {
  _event: Funded;

  constructor(event: Funded) {
    this._event = event;
  }

  get cheqId(): bigint {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Written extends ethereum.Event {
  get params(): Written__Params {
    return new Written__Params(this);
  }
}

export class Written__Params {
  _event: Written;

  constructor(event: Written) {
    this._event = event;
  }

  get cheqId(): bigint {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): bigint {
    return this._event.parameters[2].value.toBigInt();
  }

  get escrowed(): bigint {
    return this._event.parameters[3].value.toBigInt();
  }

  get drawer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get broker(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class CRX__cheqInfoResult {
  value0: Address;
  value1: bigint;
  value2: bigint;
  value3: Address;
  value4: Address;
  value5: Address;

  constructor(
    value0: Address,
    value1: bigint,
    value2: bigint,
    value3: Address,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class CRX extends ethereum.SmartContract {
  static bind(address: Address): CRX {
    return new CRX("CRX", address);
  }

  balanceOf(owner: Address): bigint {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<bigint> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  brokerWhitelist(param0: Address): boolean {
    const result = super.call(
      "brokerWhitelist",
      "brokerWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_brokerWhitelist(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "brokerWhitelist",
      "brokerWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cheqAmount(cheqId: bigint): bigint {
    const result = super.call("cheqAmount", "cheqAmount(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(cheqId),
    ]);

    return result[0].toBigInt();
  }

  try_cheqAmount(cheqId: bigint): ethereum.CallResult<bigint> {
    const result = super.tryCall(
      "cheqAmount",
      "cheqAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cheqBroker(cheqId: bigint): Address {
    const result = super.call("cheqBroker", "cheqBroker(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(cheqId),
    ]);

    return result[0].toAddress();
  }

  try_cheqBroker(cheqId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "cheqBroker",
      "cheqBroker(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cheqDrawer(cheqId: bigint): Address {
    const result = super.call("cheqDrawer", "cheqDrawer(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(cheqId),
    ]);

    return result[0].toAddress();
  }

  try_cheqDrawer(cheqId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "cheqDrawer",
      "cheqDrawer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cheqEscrowed(cheqId: bigint): bigint {
    const result = super.call(
      "cheqEscrowed",
      "cheqEscrowed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );

    return result[0].toBigInt();
  }

  try_cheqEscrowed(cheqId: bigint): ethereum.CallResult<bigint> {
    const result = super.tryCall(
      "cheqEscrowed",
      "cheqEscrowed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cheqInfo(param0: bigint): CRX__cheqInfoResult {
    const result = super.call(
      "cheqInfo",
      "cheqInfo(uint256):(address,uint256,uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CRX__cheqInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_cheqInfo(param0: bigint): ethereum.CallResult<CRX__cheqInfoResult> {
    const result = super.tryCall(
      "cheqInfo",
      "cheqInfo(uint256):(address,uint256,uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CRX__cheqInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  cheqRecipient(cheqId: bigint): Address {
    const result = super.call(
      "cheqRecipient",
      "cheqRecipient(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );

    return result[0].toAddress();
  }

  try_cheqRecipient(cheqId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "cheqRecipient",
      "cheqRecipient(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(cheqId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cheqToken(cheqId: bigint): Address {
    const result = super.call("cheqToken", "cheqToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(cheqId),
    ]);

    return result[0].toAddress();
  }

  try_cheqToken(cheqId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall("cheqToken", "cheqToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(cheqId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(_token: Address, _amount: bigint): boolean {
    const result = super.call("deposit", "deposit(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);

    return result[0].toBoolean();
  }

  try_deposit(_token: Address, _amount: bigint): ethereum.CallResult<boolean> {
    const result = super.tryCall("deposit", "deposit(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit1(to: Address, token: Address, amount: bigint): boolean {
    const result = super.call(
      "deposit",
      "deposit(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBoolean();
  }

  try_deposit1(
    to: Address,
    token: Address,
    amount: bigint
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "deposit",
      "deposit(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposits(param0: Address, param1: Address): bigint {
    const result = super.call(
      "deposits",
      "deposits(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_deposits(param0: Address, param1: Address): ethereum.CallResult<bigint> {
    const result = super.tryCall(
      "deposits",
      "deposits(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: bigint): Address {
    const result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    const result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    const result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    const result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: bigint): Address {
    const result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: bigint): ethereum.CallResult<Address> {
    const result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    const result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    const result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: bigint): string {
    const result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: bigint): ethereum.CallResult<string> {
    const result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): bigint {
    const result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<bigint> {
    const result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  write(
    from: Address,
    recipient: Address,
    _token: Address,
    amount: bigint,
    escrow: bigint,
    owner: Address
  ): bigint {
    const result = super.call(
      "write",
      "write(address,address,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(escrow),
        ethereum.Value.fromAddress(owner),
      ]
    );

    return result[0].toBigInt();
  }

  try_write(
    from: Address,
    recipient: Address,
    _token: Address,
    amount: bigint,
    escrow: bigint,
    owner: Address
  ): ethereum.CallResult<bigint> {
    const result = super.tryCall(
      "write",
      "write(address,address,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(escrow),
        ethereum.Value.fromAddress(owner),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): bigint {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CashCall extends ethereum.Call {
  get inputs(): CashCall__Inputs {
    return new CashCall__Inputs(this);
  }

  get outputs(): CashCall__Outputs {
    return new CashCall__Outputs(this);
  }
}

export class CashCall__Inputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }

  get cheqId(): bigint {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cashAmount(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CashCall__Outputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): bigint {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get cheqId(): bigint {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cheqId(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cheqId(): bigint {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WhitelistBrokerCall extends ethereum.Call {
  get inputs(): WhitelistBrokerCall__Inputs {
    return new WhitelistBrokerCall__Inputs(this);
  }

  get outputs(): WhitelistBrokerCall__Outputs {
    return new WhitelistBrokerCall__Outputs(this);
  }
}

export class WhitelistBrokerCall__Inputs {
  _call: WhitelistBrokerCall;

  constructor(call: WhitelistBrokerCall) {
    this._call = call;
  }

  get broker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isAccepted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get brokerName(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class WhitelistBrokerCall__Outputs {
  _call: WhitelistBrokerCall;

  constructor(call: WhitelistBrokerCall) {
    this._call = call;
  }
}

export class WriteCall extends ethereum.Call {
  get inputs(): WriteCall__Inputs {
    return new WriteCall__Inputs(this);
  }

  get outputs(): WriteCall__Outputs {
    return new WriteCall__Outputs(this);
  }
}

export class WriteCall__Inputs {
  _call: WriteCall;

  constructor(call: WriteCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): bigint {
    return this._call.inputValues[3].value.toBigInt();
  }

  get escrow(): bigint {
    return this._call.inputValues[4].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class WriteCall__Outputs {
  _call: WriteCall;

  constructor(call: WriteCall) {
    this._call = call;
  }

  get value0(): bigint {
    return this._call.outputValues[0].value.toBigInt();
  }
}
