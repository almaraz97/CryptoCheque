// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SelfSignedCheqReleased extends ethereum.Event {
  get params(): SelfSignedCheqReleased__Params {
    return new SelfSignedCheqReleased__Params(this);
  }
}

export class SelfSignedCheqReleased__Params {
  _event: SelfSignedCheqReleased;

  constructor(event: SelfSignedCheqReleased) {
    this._event = event;
  }

  get cheqId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SelfSignedCheqWritten extends ethereum.Event {
  get params(): SelfSignedCheqWritten__Params {
    return new SelfSignedCheqWritten__Params(this);
  }
}

export class SelfSignedCheqWritten__Params {
  _event: SelfSignedCheqWritten;

  constructor(event: SelfSignedCheqWritten) {
    this._event = event;
  }

  get cheqId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get inspectionPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get funder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SelfSignTimeLock extends ethereum.SmartContract {
  static bind(address: Address): SelfSignTimeLock {
    return new SelfSignTimeLock("SelfSignTimeLock", address);
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  cashable(cheqId: BigInt, caller: Address, param2: BigInt): BigInt {
    let result = super.call(
      "cashable",
      "cashable(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_cashable(
    cheqId: BigInt,
    caller: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cashable",
      "cashable(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cheq(): Address {
    let result = super.call("cheq", "cheq():(address)", []);

    return result[0].toAddress();
  }

  try_cheq(): ethereum.CallResult<Address> {
    let result = super.tryCall("cheq", "cheq():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cheqCreated(param0: BigInt): BigInt {
    let result = super.call("cheqCreated", "cheqCreated(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_cheqCreated(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cheqCreated",
      "cheqCreated(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cheqFunder(param0: BigInt): Address {
    let result = super.call("cheqFunder", "cheqFunder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_cheqFunder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("cheqFunder", "cheqFunder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cheqInspectionPeriod(param0: BigInt): BigInt {
    let result = super.call(
      "cheqInspectionPeriod",
      "cheqInspectionPeriod(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_cheqInspectionPeriod(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cheqInspectionPeriod",
      "cheqInspectionPeriod(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cheqReceiver(param0: BigInt): Address {
    let result = super.call("cheqReceiver", "cheqReceiver(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_cheqReceiver(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cheqReceiver",
      "cheqReceiver(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundable(cheqId: BigInt, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "fundable",
      "fundable(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_fundable(
    cheqId: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundable",
      "fundable(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovable(cheqId: BigInt, caller: Address, param2: Address): boolean {
    let result = super.call(
      "isApprovable",
      "isApprovable(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovable(
    cheqId: BigInt,
    caller: Address,
    param2: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovable",
      "isApprovable(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEarlyReleased(param0: BigInt): boolean {
    let result = super.call(
      "isEarlyReleased",
      "isEarlyReleased(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isEarlyReleased(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEarlyReleased",
      "isEarlyReleased(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTransferable(cheqId: BigInt, caller: Address, param2: Address): boolean {
    let result = super.call(
      "isTransferable",
      "isTransferable(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTransferable(
    cheqId: BigInt,
    caller: Address,
    param2: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransferable",
      "isTransferable(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(cheqId),
        ethereum.Value.fromAddress(caller),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWriteable(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Address,
    param5: Address
  ): boolean {
    let result = super.call(
      "isWriteable",
      "isWriteable(address,address,uint256,uint256,address,address):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromAddress(param4),
        ethereum.Value.fromAddress(param5)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWriteable(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Address,
    param5: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWriteable",
      "isWriteable(address,address,uint256,uint256,address,address):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromAddress(param4),
        ethereum.Value.fromAddress(param5)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenWhitelist(param0: Address): boolean {
    let result = super.call(
      "tokenWhitelist",
      "tokenWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_tokenWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenWhitelist",
      "tokenWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  writeCheq(
    _token: Address,
    amount: BigInt,
    escrow: BigInt,
    recipient: Address,
    inspectionPeriod: BigInt
  ): BigInt {
    let result = super.call(
      "writeCheq",
      "writeCheq(address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(escrow),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(inspectionPeriod)
      ]
    );

    return result[0].toBigInt();
  }

  try_writeCheq(
    _token: Address,
    amount: BigInt,
    escrow: BigInt,
    recipient: Address,
    inspectionPeriod: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "writeCheq",
      "writeCheq(address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(escrow),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(inspectionPeriod)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _cheq(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCheqCall extends ethereum.Call {
  get inputs(): ApproveCheqCall__Inputs {
    return new ApproveCheqCall__Inputs(this);
  }

  get outputs(): ApproveCheqCall__Outputs {
    return new ApproveCheqCall__Outputs(this);
  }
}

export class ApproveCheqCall__Inputs {
  _call: ApproveCheqCall;

  constructor(call: ApproveCheqCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cheqId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCheqCall__Outputs {
  _call: ApproveCheqCall;

  constructor(call: ApproveCheqCall) {
    this._call = call;
  }
}

export class CashCheqCall extends ethereum.Call {
  get inputs(): CashCheqCall__Inputs {
    return new CashCheqCall__Inputs(this);
  }

  get outputs(): CashCheqCall__Outputs {
    return new CashCheqCall__Outputs(this);
  }
}

export class CashCheqCall__Inputs {
  _call: CashCheqCall;

  constructor(call: CashCheqCall) {
    this._call = call;
  }

  get cheqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CashCheqCall__Outputs {
  _call: CashCheqCall;

  constructor(call: CashCheqCall) {
    this._call = call;
  }
}

export class CashCheq1Call extends ethereum.Call {
  get inputs(): CashCheq1Call__Inputs {
    return new CashCheq1Call__Inputs(this);
  }

  get outputs(): CashCheq1Call__Outputs {
    return new CashCheq1Call__Outputs(this);
  }
}

export class CashCheq1Call__Inputs {
  _call: CashCheq1Call;

  constructor(call: CashCheq1Call) {
    this._call = call;
  }

  get cheqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CashCheq1Call__Outputs {
  _call: CashCheq1Call;

  constructor(call: CashCheq1Call) {
    this._call = call;
  }
}

export class EarlyReleaseCall extends ethereum.Call {
  get inputs(): EarlyReleaseCall__Inputs {
    return new EarlyReleaseCall__Inputs(this);
  }

  get outputs(): EarlyReleaseCall__Outputs {
    return new EarlyReleaseCall__Outputs(this);
  }
}

export class EarlyReleaseCall__Inputs {
  _call: EarlyReleaseCall;

  constructor(call: EarlyReleaseCall) {
    this._call = call;
  }

  get cheqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isReleased(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class EarlyReleaseCall__Outputs {
  _call: EarlyReleaseCall;

  constructor(call: EarlyReleaseCall) {
    this._call = call;
  }
}

export class FundCheqCall extends ethereum.Call {
  get inputs(): FundCheqCall__Inputs {
    return new FundCheqCall__Inputs(this);
  }

  get outputs(): FundCheqCall__Outputs {
    return new FundCheqCall__Outputs(this);
  }
}

export class FundCheqCall__Inputs {
  _call: FundCheqCall;

  constructor(call: FundCheqCall) {
    this._call = call;
  }

  get cheqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FundCheqCall__Outputs {
  _call: FundCheqCall;

  constructor(call: FundCheqCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class TransferCheqCall extends ethereum.Call {
  get inputs(): TransferCheqCall__Inputs {
    return new TransferCheqCall__Inputs(this);
  }

  get outputs(): TransferCheqCall__Outputs {
    return new TransferCheqCall__Outputs(this);
  }
}

export class TransferCheqCall__Inputs {
  _call: TransferCheqCall;

  constructor(call: TransferCheqCall) {
    this._call = call;
  }

  get cheqId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferCheqCall__Outputs {
  _call: TransferCheqCall;

  constructor(call: TransferCheqCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WhitelistTokenCall extends ethereum.Call {
  get inputs(): WhitelistTokenCall__Inputs {
    return new WhitelistTokenCall__Inputs(this);
  }

  get outputs(): WhitelistTokenCall__Outputs {
    return new WhitelistTokenCall__Outputs(this);
  }
}

export class WhitelistTokenCall__Inputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isAccepted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistTokenCall__Outputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }
}

export class WriteCheqCall extends ethereum.Call {
  get inputs(): WriteCheqCall__Inputs {
    return new WriteCheqCall__Inputs(this);
  }

  get outputs(): WriteCheqCall__Outputs {
    return new WriteCheqCall__Outputs(this);
  }
}

export class WriteCheqCall__Inputs {
  _call: WriteCheqCall;

  constructor(call: WriteCheqCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get escrow(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get inspectionPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class WriteCheqCall__Outputs {
  _call: WriteCheqCall;

  constructor(call: WriteCheqCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
