// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.16;

import {ModuleBase} from "../ModuleBase.sol";
import {DataTypes} from "../libraries/DataTypes.sol";
import {ICheqModule} from "../interfaces/ICheqModule.sol";
import {ICheqRegistrar} from "../interfaces/ICheqRegistrar.sol";
import {IWriteRule, ITransferRule, IFundRule, ICashRule, IApproveRule} from "../interfaces/IWTFCRules.sol";

import "./interfaces/IUnicrow.sol";
import "./interfaces/IUnicrowClaim.sol";
import "./interfaces/IUnicrowDispute.sol";
import "./interfaces/IUnicrowArbitrator.sol";
import "./interfaces/IUnicrowClaimRewards.sol";
import "./interfaces/IUnicrowStakingRewards.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

  function pay( EscrowInput memory input, address arbitrator, uint16 arbitratorFee) external payable;

  function challenge(uint256 escrowId,uint16[4] memory split,int16[2] memory consensus,uint64 challengeStart,uint64 challengeEnd) external;

  function refund(uint escrowId) external;

  function release(uint escrowId) external;

  function settle(uint256 escrowId,uint16[4] memory split,int16[2] memory consensus) external;

  function splitCalculation(uint16[5] calldata currentSplit) external returns(uint16[5] memory);

  function getEscrow(uint256 escrowId) external returns(Escrow memory);

  function setClaimed(uint escrowId) external;

  function updateEscrowFee(uint16 fee) external;

  function updateGovernance(address governance) external;

/// @dev Create a CheqProtocol version of the Unicrow contract
contract Unicrow is IWriteRule, ITransferRule, IFundRule, ICashRule, IApproveRule {

/// @title The primary Unicrow contract
/// @notice Receives and distributes the payments, maintains and provides information about the escrow records, and allows basic operations
// contract Unicrow is ReentrancyGuard, IUnicrow, Context {
    using Counters for Counters.Counter;

    /// Generates unique escrow ID in incremental order
    Counters.Counter public escrowIdCounter;

    /// @notice Arbitrator information and functionality for the escrows
    IUnicrowArbitrator public immutable unicrowArbitrator;

    /// @notice Withdraws payments from the escrows once the criteria are met
    IUnicrowClaim public immutable unicrowClaim;

    /// @notice Dispute resolution, incl. challenges and settlements
    UnicrowDispute public immutable unicrowDispute;

    /// @notice Escrow fee in bips (can never be higher than 100)
    uint16 public protocolFee;

    /// address of a governance contract (multisig initially, DAO governor eventually)
    address public governanceAddress;

    /// storage of the primary escrow data. The key is generated by the contract incrementally
    mapping(uint256 => Escrow) escrows;

    /**
     * @notice Emitted when the payment is deposited into the contract and an escrow record is created
     * @param escrowId Unique, contract-generated escrow record identifier
     * @param blockTime timestamp of the block in which the transaction was included
     * @param escrow Details of the escrow as stored in the contract
     * @param arbitrator Address of an arbitrator (zero is returned if no arbitrator was defined)
     * @param arbitratorFee Arbitrator's fee in bips
     * @param challengePeriod Initial challenge period in seconds
     */
    event Pay(uint256 indexed escrowId, uint256 blockTime, Escrow escrow, address arbitrator, uint256 arbitratorFee, uint256 challengePeriod);

    /**
     * @notice Emitted when the buyer releases the payment manually (regardless of the challenge period)
     * @param escrowId ID of the released escrow payment
     * @param blockTime Timestamp of the block in which the transaction was included
     * @param escrow Details of the released Escrow
     * @param amounts Amounts in token allocated to each party (incl. fees). See UnicrowTypes for mapping of each party (WHO_*)
     */
    event Release(uint256 indexed escrowId, uint256 blockTime, Escrow escrow, uint256[5] amounts);

    /**
     * @notice Emitted when seller fully refunds the payment. Detailed calculated values are not returned because the payment is refunded in full, all fees are waived
     * @param escrowId Id of the refunded payment
     * @param escrow Details of the refunded payment
     * @param blockTime Timestamp of the block in which the transaction was included
     */
    event Refund(uint256 indexed escrowId, Escrow escrow, uint256 blockTime);

    /// The contructor initiates immutable and governed references to other contracts
    constructor(
        address unicrowClaim_,
        address unicrowArbitrator_,
        address unicrowDispute_,
        address governanceAddress_,
        uint16 protocolFee_
    ) {
        unicrowArbitrator = IUnicrowArbitrator(unicrowArbitrator_);
        unicrowClaim = IUnicrowClaim(unicrowClaim_);
        unicrowDispute = UnicrowDispute(unicrowDispute_);
        governanceAddress = governanceAddress_;
        protocolFee = protocolFee_;
    }

    /// Check that the governance contract is calling this
    modifier onlyGovernance() {
        require(_msgSender() == governanceAddress);
        _;
    }

    /// Check that Unicrow's claimMultiple contract is calling this
    modifier onlyUnicrowClaim() {
        require(_msgSender() == address(unicrowClaim));
        _;
    }

    /// Check that arbitration or dispute contract is calling this
    modifier onlyUnicrowArbitratorOrDispute() {
        require(_msgSender() == address(unicrowArbitrator) || _msgSender() == address(unicrowDispute));
        _;
    }

    /// Check that dispute contract is calling this
    modifier onlyUnicrowDispute() {
        require(_msgSender() == address(unicrowDispute));
        _;
    }

    /// @inheritdoc IUnicrow
    function pay(
        EscrowInput calldata input,
        address arbitrator,
        uint16 arbitratorFee
    ) external override payable nonReentrant {
        // Get current escrow id from the incremental counter
        uint256 escrowId = escrowIdCounter.current();

        // The address that sent the payment is set as a buyer
        address buyer = _msgSender();

        // Amount of the payment in ERC20 tokens
        uint amount = input.amount;

        // Make sure there's something left for the seller :-)
        require(arbitratorFee + input.marketplaceFee + protocolFee < 10000, "1-026");

        // Payment can't use address(0)
        require(escrows[escrowId].buyer == address(0), "0-001");

        // Seller cannot be empty
        require(input.seller != address(0), "0-002");

        // Buyer cannot be seller
        require(buyer != input.seller, "0-003");

        // Payment amount must be greater than zero
        require(amount > 0, "0-011");

        // Buyer can't send ETH if currency is not ETH
        if(msg.value > 0) {
            require(input.currency == address(0), "0-010");
        }
        
        // Check if the payment was made in ETH 
        if (input.currency == address(0)) {
            // Amount in the payment metadata must match what was sent
            require(amount == msg.value);
        } else {
            uint balanceBefore = IERC20(input.currency).balanceOf(address(this));

            // If the payment was made in ERC20 and not ETH, execute the transfer
            SafeERC20.safeTransferFrom(
                IERC20(input.currency),
                buyer,
                address(this),
                amount
            );

            uint balanceAfter = IERC20(input.currency).balanceOf(address(this));

            // Make sure that the input amount is the amount received
            amount = balanceAfter - balanceBefore;
        }

        // If a marketplace fee was set, ensure a marketplace address was set
        if(input.marketplaceFee > 0) {
            require(input.marketplace != address(0), "0-009");
        }

        // Check if the arbitrator was defined
        if (arbitrator != address(0)) {

            // Arbitrator can't be seller or buyer
            require(arbitrator != buyer && arbitrator != input.seller, "1-027");

            // Set the arbitrator in the arbitrator contract
            unicrowArbitrator.setArbitrator(escrowId, arbitrator, arbitratorFee);
        }

        // Split array is how Unicrow maintains information about seller's and buyer's shares, and the fees
        uint16[4] memory split = [0, 10000, input.marketplaceFee, protocolFee];
        
        // Set initial consensus to buyer = 0, seller = 1
        int16[2] memory consensus = [int16(0), int16(1)];

        // Create an Escrow object that will be stored in the contract
        Escrow memory escrow = Escrow({
            buyer: buyer,
            seller: input.seller,
            currency: input.currency,
            marketplace: input.marketplace,
            marketplaceFee: input.marketplaceFee,
            claimed: 0,
            split: split,
            consensus: consensus,
            challengeExtension: uint64(input.challengeExtension > 0 ? input.challengeExtension : input.challengePeriod),
            challengePeriodStart: uint64(block.timestamp), //challenge start
            challengePeriodEnd: uint64(block.timestamp + input.challengePeriod), //chalenge end
            amount: amount
        });

        // Store the escrow information
        escrows[escrowId] = escrow;

        // Increase the escrow id counter
        escrowIdCounter.increment();

        emit Pay(escrowId, block.timestamp, escrow, arbitrator, arbitratorFee, input.challengePeriod);
    }

    /// @inheritdoc IUnicrow
    function refund(uint256 escrowId) external override nonReentrant {
        address sender = _msgSender();

        // Get escrow information from the contract's storage
        Escrow memory escrow = escrows[escrowId];

        // Only seller can refund
        require(sender == escrow.seller, "1-011");

        // Check that the escrow is not claimed yet
        require(escrow.claimed == 0, "0-005");

        // Set split to 100% to buyer and waive the fees
        escrow.split[WHO_BUYER] = 10000;
        escrow.split[WHO_SELLER] = 0;
        escrow.split[WHO_MARKETPLACE] = 0;
        escrow.split[WHO_PROTOCOL] = 0;
        
        // Keep record of number of challenges (for reputation purposes)
        escrow.consensus[WHO_BUYER] = abs8(escrow.consensus[WHO_BUYER]) + 1;

        // Set escrow consensus based on the number of previous challenges (1 = no challenge)
        escrow.consensus[WHO_SELLER] = abs8(escrow.consensus[WHO_SELLER]);

        // Update splits and consensus information in the storage
        escrows[escrowId].split = escrow.split;
        escrows[escrowId].consensus = escrow.consensus;

        // Update the escrow as claimed in the storage and in the emitted event
        escrows[escrowId].claimed = 1;
        escrow.claimed = 1;

        // Withdraw the amount to the buyer
        if (address(escrow.currency) == address(0)) {
            (bool success, ) = escrow.buyer.call{value: escrow.amount}("");
            require(success, "1-012");
        } else {
            SafeERC20.safeTransfer(
                IERC20(escrow.currency),
                escrow.buyer,
                escrow.amount
            );
        }


        emit Refund(escrowId, escrow, block.timestamp);
    }

    /// @inheritdoc IUnicrow
    function release(uint256 escrowId) external override {
        address sender = _msgSender();
        Escrow memory escrow = escrows[escrowId];

        // Only buyer can release
        require(sender == escrow.buyer, "1-025");

        // Set buyer consensus to 1 or based on the number of previous challenges
        escrow.consensus[WHO_BUYER] = abs8(escrow.consensus[WHO_BUYER]) + 1;

        // Set seller's escrow consensus based on the number of previous challenges
        escrow.consensus[WHO_SELLER] = abs8(escrow.consensus[WHO_SELLER]);

        // Update consensus in the storage
        escrows[escrowId].consensus = escrow.consensus;

        // Claim the payment and fees and get the final amounts
        uint256[5] memory amounts = unicrowClaim.claim(escrowId);

        // Emit all the information including the amounts
        emit Release(escrowId, block.timestamp, escrow, amounts);
    }

    /// @inheritdoc IUnicrow
    function challenge(
        uint256 escrowId,
        uint16[4] calldata split,
        int16[2] calldata consensus,
        uint64 challengeStart,
        uint64 challengeEnd
    ) external override onlyUnicrowDispute {
        escrows[escrowId].split = split;
        escrows[escrowId].consensus = consensus;
        escrows[escrowId].challengePeriodStart = challengeStart;
        escrows[escrowId].challengePeriodEnd = challengeEnd;
    }

    /// @inheritdoc IUnicrow
    function updateEscrowFee(uint16 fee) external override onlyGovernance {
        require(fee <= 100, "0-008");
        protocolFee = fee;
    }

    /// @inheritdoc IUnicrow
    function updateGovernance(address governance) external override onlyGovernance {
        governanceAddress = governance;
    }

    /// @notice Return basic escrow information (excl. arbitration information, settlement offers, and token details)
    /// @param escrowId ID of the escrow to be returned
    function getEscrow(uint256 escrowId)
        external
        override
        view
        returns (Escrow memory)
    {
        return escrows[escrowId];
    }

    /// @notice Return all the escrow data (incl. arbitration information, settlement offers, and token details)
    /// @param escrowId ID of the escrow to be returned
    function getAllEscrowData(uint256 escrowId)
        external
        view
        returns (Data memory)
    {
        address currency = escrows[escrowId].currency;

        // Get information about the ERC20 token (or return ETH)
        Token memory token = Token({
            address_: currency,
            decimals: currency == address(0) ? 18 : ERC20(currency).decimals(),
            symbol: currency == address(0) ? "ETH" : ERC20(currency).symbol()
        });

        Arbitrator memory arbitrator = unicrowArbitrator.getArbitratorData(escrowId);
        Settlement memory settlement = unicrowDispute.getSettlementDetails(escrowId);

        return Data(
            escrows[escrowId],
            arbitrator,
            settlement,
            token
        );
    }

    /// @dev Transfer ether or token from this contract's treasury. Can be called only by Unicrow's Claim contract
    function sendEscrowShare(
        address to,
        uint256 amount,
        address currency
    ) public onlyUnicrowClaim {
         if(currency == address(0)) {
            to.call{value: amount, gas: 5000}("");
         } else {
           SafeERC20.safeTransfer(
                IERC20(currency),
                to,
                amount
            );
         }
     }

    /// @inheritdoc IUnicrow
    function settle(
        uint256 escrowId,
        uint16[4] calldata split,
        int16[2] calldata consensus
    ) external override onlyUnicrowArbitratorOrDispute {
        escrows[escrowId].split = split;
        escrows[escrowId].consensus = consensus;
    }

    /// @inheritdoc IUnicrow
    function splitCalculation(
        uint16[5] calldata currentSplit
    ) external pure override returns (uint16[5] memory) {
        uint16[5] memory split;

        uint16 calculatedArbitratorFee;

        // Discount the protocol fee based on seller's share
        if (currentSplit[WHO_PROTOCOL] > 0) {
            split[WHO_PROTOCOL] = uint16((
                uint256(currentSplit[WHO_PROTOCOL]) *
                    currentSplit[WHO_SELLER]) /
                    _100_PCT_IN_BIPS
            );
        }

        // Discount the marketplace fee based on the seller's share
        if (currentSplit[WHO_MARKETPLACE] > 0) {
            split[WHO_MARKETPLACE] = uint16(
                (uint256(currentSplit[WHO_MARKETPLACE]) *
                    currentSplit[WHO_SELLER]) /
                    _100_PCT_IN_BIPS
            );
        }

        // Calculate the arbitrator fee based on the seller's split
        if (currentSplit[WHO_ARBITRATOR] > 0) {
            calculatedArbitratorFee = uint16(
                (uint256(currentSplit[WHO_ARBITRATOR]) *
                    currentSplit[WHO_SELLER]) /
                    _100_PCT_IN_BIPS
            );
        }

        // Calculate seller's final share by substracting all the fees
        split[WHO_SELLER] = currentSplit[WHO_SELLER] - split[WHO_PROTOCOL] - split[WHO_MARKETPLACE] - calculatedArbitratorFee;
        split[WHO_BUYER] = currentSplit[WHO_BUYER];
        split[WHO_ARBITRATOR] = calculatedArbitratorFee;

        return split;
    }

    /// @inheritdoc IUnicrow
    function setClaimed(uint256 escrowId) external override onlyUnicrowClaim nonReentrant {
        escrows[escrowId].claimed = 1;
    }

}

/**
 * @title Unicrow Arbitrator
 * @notice Functionality for assigning an arbitrator to an escrow and for an arbitrator to decide a dispute
 */
contract UnicrowArbitrator is IUnicrowArbitrator, Context, ReentrancyGuard {
    using Address for address payable;

    /// Reference to the main Unicrow contract
    Unicrow public immutable unicrow;
    
    /// Reference to the contract that manages claims from the escrows
    IUnicrowClaim public immutable unicrowClaim;

    /// Stores information about arbitrators in relation to escrows
    mapping(uint256 => Arbitrator) public escrowArbitrator;

    /**
     * @dev Emitted when an arbitrator has been proposed by one of the parties or
     * @dev if the other party sends a different proposal or also if the original party changes their proposal
     * @param escrowId Id of the escrow to which the proposer belongs
     * @param arbitrator Arbitrator's address
     * @param arbitratorFee Proposed fee in bips
     * @param proposer Address of the party that sent the proposal
    */
    event ArbitratorProposed(uint256 indexed escrowId, address arbitrator, uint16 arbitratorFee, address proposer);

    /**
     * @dev Emitted when the arbitrator proposal was approved by the other party
     * @param escrowId Id of the escrow to which the proposer belongs
     * @param arbitrator Arbitrator's address
     * @param arbitratorFee Proposed fee in bips
    */
    event ArbitratorApproved(uint256 indexed escrowId, address arbitrator, uint256 arbitratorFee);

    /**
     * @dev Emitted when the arbitrator has resolved a dispute
     * @param escrowId Id of the arbitrated escrow
     * @param escrow The escrow data, incl. the final split between buyer and seller as decided by the arbitrator
     * @param blockTime Timestamp of the block in which the transaction was minuted
     * @param amounts All amounts (i.e. incl. marketplace fee, arbitrator fee, and protocol fee) in the token
     */
    event Arbitrated(uint256 indexed escrowId, Escrow escrow, uint256 blockTime, uint256[5] amounts);

    /**
     * The constructor provides immutable reference to the main escrow and claimMultiple contracts
     * @param unicrow_ Unicrow contract address
     * @param unicrowClaim_ UnicrowClaim contract address
     */
    constructor(
        address unicrow_,
        address unicrowClaim_
    ) {
        unicrow = Unicrow(payable(unicrow_));
        unicrowClaim = IUnicrowClaim(payable(unicrowClaim_));
    }

    /**
     * @dev Checks if the provided address is either a buyer or a seller in the provided escrow
     * @param escrowId Id of the escrow to check
     * @param caller Address to check against
     */
    modifier onlyEscrowMember(uint256 escrowId, address caller) {
        require(_isEscrowMember(escrowId, caller), "2-004");
        _;
    }

    /// @dev Checks if the caller is the Unicrow's main escrow contract
    modifier onlyUnicrow() {
        require(_msgSender() == address(unicrow));
        _;
    }

    /// @inheritdoc IUnicrowArbitrator
    function setArbitrator(
        uint256 escrowId,
        address arbitrator,
        uint16 arbitratorFee
    ) external override onlyUnicrow {
        // Store arbitrator address and fee
        escrowArbitrator[escrowId].arbitrator = arbitrator;
        escrowArbitrator[escrowId].arbitratorFee = arbitratorFee;

        // In this case, the arbitrator was set during the payment,
        // so it is considered to be based on the mutual consensus consensus
        escrowArbitrator[escrowId].buyerConsensus = true;
        escrowArbitrator[escrowId].sellerConsensus = true;
    }

    /// @inheritdoc IUnicrowArbitrator
    function proposeArbitrator(
        uint256 escrowId,
        address arbitrator,
        uint16 arbitratorFee
    ) external override onlyEscrowMember(escrowId, _msgSender()) {
        Arbitrator storage arbitratorData = escrowArbitrator[escrowId];
        Escrow memory escrow = unicrow.getEscrow(escrowId);

        // Arbitrator can't be address 0
        require(arbitrator != address(0), "2-009");

        // Check if arbitrator is not the buyer or seller
        require(arbitrator != escrow.buyer && arbitrator != escrow.seller, "2-010");

        // Check that arbitrator hasnt't been set already
        require(!arbitratorData.buyerConsensus || !arbitratorData.sellerConsensus,"2-006" );

        // Make sure there's something left for the seller :-)
        require(escrow.marketplaceFee + escrow.split[WHO_PROTOCOL] + arbitratorFee < 10000, "2-007");

        // Save the proposal parameters
        arbitratorData.arbitrator = arbitrator;
        arbitratorData.arbitratorFee = arbitratorFee;

        // That the arbitrator is only proposed and not assigne is indicated by a lack of consensus
        if (_isEscrowBuyer(escrow, _msgSender())) {
            arbitratorData.buyerConsensus = true;
            arbitratorData.sellerConsensus = false;
        } else if (_isEscrowSeller(escrow, _msgSender())) {
            arbitratorData.sellerConsensus = true;
            arbitratorData.buyerConsensus = false;
        }

        emit ArbitratorProposed(
            escrowId,
            arbitrator,
            arbitratorFee,
            _msgSender()
        );
    }

    /// @inheritdoc IUnicrowArbitrator
    function approveArbitrator(uint256 escrowId, address validationAddress, uint16 validation)
        external
        override
        onlyEscrowMember(escrowId, _msgSender())
    {
        Arbitrator memory arbitratorData = getArbitratorData(escrowId);
        Escrow memory escrow = unicrow.getEscrow(escrowId);

        // Check that the arbitrator has been proposed
        require(arbitratorData.arbitrator != address(0), "2-008");

        // Compare the approval to the original proposal
        require(validationAddress == arbitratorData.arbitrator, "2-008");
        require(validation == arbitratorData.arbitratorFee, "2-007");

        // Check that the buyer is approving seller's proposal (or vice versa) and if yes, confirm the consensus
        if (_isEscrowBuyer(escrow, _msgSender())) {
            require(
                arbitratorData.buyerConsensus == false,
                "2-003"
            );
            escrowArbitrator[escrowId].buyerConsensus = true;
        }
        if (_isEscrowSeller(escrow, _msgSender())) {
            require(
                arbitratorData.sellerConsensus == false,
                "2-003"
            );
            escrowArbitrator[escrowId].sellerConsensus = true;
        }

        emit ArbitratorApproved(escrowId, arbitratorData.arbitrator, arbitratorData.arbitratorFee);
    }

    /// @inheritdoc IUnicrowArbitrator
    function arbitrate(uint256 escrowId, uint16[2] calldata newSplit)
        external
        override
    {
        Arbitrator memory arbitratorData = getArbitratorData(escrowId);
        Escrow memory escrow = unicrow.getEscrow(escrowId);

        // Check that this is this escrow's arbitrator calling
        require(_msgSender() == arbitratorData.arbitrator, "2-005");
        
        // Check that the arbitrator was set by mutual consensus
        require(
            arbitratorData.buyerConsensus && arbitratorData.sellerConsensus,
            "2-001"
        );
        
        // Ensure the splits equal 100%
        require(newSplit[WHO_BUYER] + newSplit[WHO_SELLER] == 10000, "1-007");

        // Retain number of challenges in the final consensus record
        escrow.consensus[WHO_BUYER] = abs8(escrow.consensus[WHO_BUYER]) + 1;
        escrow.consensus[WHO_SELLER] = abs8(escrow.consensus[WHO_SELLER]);

        // Update gross (pre-fees) splits as defined in the arbitration
        escrow.split[WHO_BUYER] = newSplit[WHO_BUYER];
        escrow.split[WHO_SELLER] = newSplit[WHO_SELLER];

        // Execute settlement on the escrow
        unicrow.settle(
            escrowId,
            escrow.split,
            escrow.consensus
        );

        // Set the payment as arbitrated
        escrowArbitrator[escrowId].arbitrated = true;

        // Withdraw the amounts accordingly
        //   (this will take into account that arbitrator called this and will set arbitrator fee accordingly)
        uint256[5] memory amounts = unicrowClaim.claim(escrowId);

        emit Arbitrated(escrowId, escrow, block.timestamp, amounts);
    }

    /**
     * @dev Calculates final splits of all parties involved in the payment when the paymet is decided by an arbitrator.
     * @dev If seller's split is < 100% it will discount the marketplace and protocol fee, but (unlike when refunded by
     * @dev seller or settled mutually) will keep full Arbitrator fee and deduct it from both shares proportionally
     * @param currentSplit Current split in bips. See WHO_* contants for keys
     * @return Splits in bips using the same keys for the array
     */
    function arbitrationCalculation(
        uint16[5] calldata currentSplit
    ) public pure returns (uint16[5] memory) {
        uint16[5] memory split;

        uint16 calculatedSellerArbitratorFee;
        uint16 calculatedBuyerArbitratorFee;

        if(currentSplit[WHO_ARBITRATOR] > 0) {
            // Calculate buyer's portion of the arbitrator fee
            calculatedBuyerArbitratorFee = uint16(
                (uint256(currentSplit[WHO_ARBITRATOR])
                        * currentSplit[WHO_BUYER])
                        / _100_PCT_IN_BIPS
            );
            
             // Seller's portion of the arbitrator fee
            calculatedSellerArbitratorFee = uint16(
                (uint256(currentSplit[WHO_ARBITRATOR])
                    * currentSplit[WHO_SELLER])
                    / _100_PCT_IN_BIPS
            );
            
            // Store how much the arbitrator will get from each party
            split[WHO_ARBITRATOR] = calculatedBuyerArbitratorFee + calculatedSellerArbitratorFee;
        }

        // Protocol fee
        if (currentSplit[WHO_PROTOCOL] > 0) {
            split[WHO_PROTOCOL] = uint16(
                (uint256(currentSplit[WHO_PROTOCOL])
                    * currentSplit[WHO_SELLER])
                    / _100_PCT_IN_BIPS
            );
        }

        // Marketplace fee
        if (currentSplit[WHO_MARKETPLACE] > 0) {
            split[WHO_MARKETPLACE] = uint16(
                (uint256(currentSplit[WHO_MARKETPLACE])
                    * currentSplit[WHO_SELLER])
                    / _100_PCT_IN_BIPS
            );
        }

        // Substract buyer's portion of the arbitartor fee from their share (if any)
        if(currentSplit[WHO_BUYER] > 0) {
            split[WHO_BUYER] = uint16(
                uint256(currentSplit[WHO_BUYER])
                        - calculatedBuyerArbitratorFee
                );
        }

        // Marketplace, protocol, and seller's portion of the arbitartor fee are substracted from seller's share
        if(currentSplit[WHO_SELLER] > 0) {
            split[WHO_SELLER] = uint16(
                uint256(currentSplit[WHO_SELLER])
                    - split[WHO_PROTOCOL]
                    - split[WHO_MARKETPLACE]
                    - calculatedSellerArbitratorFee
                );
        }

        return split;
    }

    /// @inheritdoc IUnicrowArbitrator
    function getArbitratorData(uint256 escrowId)
        public
        override
        view
        returns (Arbitrator memory)
    {
        return escrowArbitrator[escrowId];
    }

    /**
     * @dev Checks whether an address is a buyer in the provided escrow
     * @param escrowId Id of the escrow to check against
     * @param member_ the address to check
     */
    function _isEscrowMember(uint256 escrowId, address member_)
        internal
        view
        returns (bool)
    {
        Escrow memory escrow = unicrow.getEscrow(escrowId);
        return escrow.buyer == member_ || escrow.seller == member_;
    }

    /**
     * @dev Checks whether an address is a buyer in the provided escrow
     * @param escrow Instance of escrow
     * @param _buyer the address to check
     */
    function _isEscrowBuyer(Escrow memory escrow, address _buyer)
        internal
        pure
        returns (bool)
    {
        return _buyer == escrow.buyer;
    }

    /**
     * @dev Checks whether an address is a seller in the provided escrow
     * @param escrow Instance of escrow
     * @param _seller the address to check
     */
    function _isEscrowSeller(Escrow memory escrow, address _seller)
        internal
        pure
        returns (bool)
    {
        return _seller == escrow.seller;
    }
}

/**
 * @title Contract for managing claims from Unicrow's escrow
 */
contract UnicrowClaim is IUnicrowClaim, Context, ReentrancyGuard {
    /// Reference to the main escrow contract (immutable)
    Unicrow public immutable unicrow;

    /// Reference to the Arbitrator contract (immutable)
    UnicrowArbitrator public immutable unicrowArbitrator;

    IUnicrowClaimRewards public crowRewards;

    IUnicrowStakingRewards public stakingRewards;

    /// Destination address of the protocol fee (governed)
    address public protocolFeeAddress;
    
    struct ClaimEvent {
        uint escrowId;
        uint[5] amount;
    }

    /// Emitted when multiple escrows are claimed
    /// @param escrows data of all escrows that were claimed
    event ClaimMultiple(ClaimEvent[] escrows);

    /// Emitted when a single escrow payment is claimed
    /// @param escrow data of the claimed escrow
    event Claim(ClaimEvent escrow);

    /**
     * @param unicrow_ main escrow contract
     * @param unicrowArbitrator_ arbitration contract
     * @param protocolFeeAddress_ address to collect protocol fee
     */
    constructor(
        address unicrow_,
        address unicrowArbitrator_,
        address protocolFeeAddress_
    ) {
        unicrow = Unicrow(payable(unicrow_));
        unicrowArbitrator = UnicrowArbitrator(unicrowArbitrator_);
        protocolFeeAddress = protocolFeeAddress_;
    }

    modifier onlyGovernance() {
        require(_msgSender() == unicrow.governanceAddress());
        _;
    }

    /// @inheritdoc IUnicrowClaim
    function updateCrowRewards(address crowRewards_) external override onlyGovernance {
        crowRewards = IUnicrowClaimRewards(crowRewards_);
    }

    /// @inheritdoc IUnicrowClaim
    function updateStakingRewards(address stakingRewards_) external override onlyGovernance {
        stakingRewards = IUnicrowStakingRewards(stakingRewards_);
    }

    /// @inheritdoc IUnicrowClaim
    function updateProtocolFeeAddress(address protocolFeeAddress_) external override onlyGovernance {
        protocolFeeAddress = protocolFeeAddress_;
    }

    /// @inheritdoc IUnicrowClaim
    function claimMultiple(uint[] calldata escrows) external override nonReentrant {

        ClaimEvent[] memory events = new ClaimEvent[](escrows.length);

        for (uint256 i = 0; i < escrows.length; ++i) {
            Escrow memory escrow = unicrow.getEscrow(escrows[i]);

            Arbitrator memory arbitratorData = unicrowArbitrator
                .getArbitratorData(escrows[i]);

            require(escrow.claimed == 0, "0-005");

            require(
                (escrow.consensus[WHO_SELLER] >= 1 &&
                    escrow.consensus[WHO_BUYER] >= 1) ||
                    block.timestamp > escrow.challengePeriodEnd,
                "0-006"
            );

            uint16[5] memory calculatedSplits = calculateSplits(
                arbitratorData,
                escrow
            );

            uint256[5] memory payments = calculatePayments(
                escrow.amount,
                calculatedSplits
            );

            address[5] memory addresses = [
                escrow.buyer,
                escrow.seller,
                escrow.marketplace,
                address(protocolFeeAddress),
                arbitratorData.arbitrator
            ];

            claimPayments(escrows[i], payments, addresses, escrow.currency);

            if(address(crowRewards) != address(0) && payments[WHO_PROTOCOL] > 0){
                crowRewards.distribute(escrow.currency, escrow.buyer, escrow.seller, payments[WHO_PROTOCOL]);
            }

            if(address(stakingRewards) != address(0) && payments[WHO_PROTOCOL] > 0){
                stakingRewards.collectFee(escrow.currency, payments[WHO_PROTOCOL]);
            }

            events[i] = ClaimEvent(escrows[i], payments);
        }

        emit ClaimMultiple(events);
    }

    /// @inheritdoc IUnicrowClaim
    function claim(uint escrowId) external override nonReentrant returns(uint256[5] memory) {
        Escrow memory escrow = unicrow.getEscrow(escrowId);

        Arbitrator memory arbitratorData = unicrowArbitrator
                .getArbitratorData(escrowId);

        // Check that the payment hasn't been claimed yet
        require(escrow.claimed == 0, "0-005");

        // Make sure both parties consented to releasing the payment from the escrow
        require(
            (escrow.consensus[WHO_SELLER] >= 1 &&
                escrow.consensus[WHO_BUYER] >= 1) ||
                block.timestamp > escrow.challengePeriodEnd,
            "0-006"
        );

        // Calculate final splits (in bips) from gross splits
        uint16[5] memory calculatedSplits = calculateSplits(
            arbitratorData,
            escrow
        );

        // Calculate amounts to be sent in the token
        uint256[5] memory payments = calculatePayments(
            escrow.amount,
            calculatedSplits
        );

        // Prepare list of addresses for the withdrawals
        address[5] memory addresses = [
            escrow.buyer,
            escrow.seller,
            escrow.marketplace,
            address(protocolFeeAddress),
            arbitratorData.arbitrator
        ];

        // Send the shares to the addresses
        claimPayments(escrowId, payments, addresses, escrow.currency);

        if(address(crowRewards) != address(0) && payments[WHO_PROTOCOL] > 0){
            crowRewards.distribute(escrow.currency, escrow.buyer, escrow.seller, payments[WHO_PROTOCOL]);
        }

        if(address(stakingRewards) != address(0) && payments[WHO_PROTOCOL] > 0){
            stakingRewards.collectFee(escrow.currency, payments[WHO_PROTOCOL]);
        }

        // Emit the event incl. final amounts
        emit Claim(ClaimEvent(escrowId, payments));

        // Return the final amounts
        return [
            payments[WHO_BUYER],
            payments[WHO_SELLER],
            payments[WHO_MARKETPLACE],
            payments[WHO_PROTOCOL],
            payments[WHO_ARBITRATOR]
        ];
    }

    /**
     * @dev Calculates how the balance in the escrow should be split between all the relevant parties
     * @param arbitrator Arbitrator information is not part of core escrow data, so data is provided separately here
     * @param escrow Escrow information
     */
    function calculateSplits(
        Arbitrator memory arbitrator,
        Escrow memory escrow
    ) internal view returns(uint16[5] memory) {
        uint16[5] memory split;
        
        // if the arbitrator was set, read their fee, otherwise set to 0
        bool arbitratorConsensus = arbitrator.buyerConsensus && arbitrator.sellerConsensus;
        uint16 arbitratorFee = arbitratorConsensus ? arbitrator.arbitratorFee : 0;

        // The calculation will differ slightly based on whether the payment was decided by an arbitrator or not
        if(arbitrator.arbitrated) {
            split = unicrowArbitrator.arbitrationCalculation(
                [
                    escrow.split[WHO_BUYER],
                    escrow.split[WHO_SELLER],
                    escrow.split[WHO_MARKETPLACE],
                    escrow.split[WHO_PROTOCOL],
                    arbitratorFee
                ]
            );
        } else {
            split = unicrow.splitCalculation(
                [
                    escrow.split[WHO_BUYER],
                    escrow.split[WHO_SELLER],
                    escrow.split[WHO_MARKETPLACE],
                    escrow.split[WHO_PROTOCOL],
                    arbitratorFee
                ]
            );
        }

        return split;
    }

    /**
     * @dev Calculates actual amounts that should be sent to the parties
     * @param amount payment amount in escrow (in token)
     * @param split final splits
     */
    function calculatePayments(
        uint amount,
        uint16[5] memory split
    ) internal pure returns(uint256[5] memory) {
        uint256[5] memory payments;

        // Multiply all the splits by the total amount
        payments[WHO_BUYER] = (uint256(split[WHO_BUYER]) * amount) / _100_PCT_IN_BIPS;
        payments[WHO_SELLER] = (uint256(split[WHO_SELLER]) * amount) / _100_PCT_IN_BIPS;
        payments[WHO_MARKETPLACE] = (uint256(split[WHO_MARKETPLACE]) * amount) / _100_PCT_IN_BIPS;
    
        // If the arbitrator decided the payment, they get their full fee
        // in such case, buyer's or seller split was reduced in the calling function)
        payments[WHO_ARBITRATOR] = (uint256(split[WHO_ARBITRATOR]) * amount) / _100_PCT_IN_BIPS;

        // The rest of the amount goes to the protocol
        payments[WHO_PROTOCOL] = amount - payments[WHO_BUYER] - payments[WHO_SELLER] - payments[WHO_MARKETPLACE] - payments[WHO_ARBITRATOR];

        return payments;
    }

    /**
     * @dev Sends payments to the addresses of all the eligible parties
     * @param escrowId Id of the escrow
     * @param amounts amounts in token to claimMultiple
     * @param addresses destination addresses for each claimed share
     * @param currency address of the payment token
     */
    function claimPayments(
        uint escrowId,
        uint[5] memory amounts,
        address[5] memory addresses,
        address currency
    ) internal {
        unicrow.setClaimed(escrowId);

        for (uint256 i = 0; i < 5; ++i) {
            if (amounts[i] > 0) {
                unicrow.sendEscrowShare(addresses[i], amounts[i], currency);
            }
        }
    }
}

contract UnicrowDispute is IUnicrowDispute, Context, ReentrancyGuard {
    using Address for address payable;

    /// Main Unicrow's escrow contract
    Unicrow public immutable unicrow;

    /// Reference to the contract that manages claims from the escrow
    IUnicrowClaim public immutable unicrowClaim;

    /// Reference to the Arbitration contract
    IUnicrowArbitrator public immutable unicrowArbitrator;

    /// Stores information about which address sent the latest offer to settle a particular escrow identified by its ID
    mapping(uint256 => address) public latestSettlementOfferBy;

    /// Stores information about the splits in the latest offer to settle an escrow identified by its ID
    mapping(uint256 => uint16[2]) public latestSettlementOffer;

    /**
     * @dev Emitted when a challenge is sent for an escrow
     * @param escrowId ID of the challenged escrow
     * @param blockTime Timestamp when the challenge was minted
     * @param escrow information about the challenged escrow
    */
    event Challenge(uint256 indexed escrowId, uint256 blockTime, Escrow escrow);

    /**
     * @dev Settlement offer (i.e. offer to split the escrow by defined shares) was sent by one of the parties
     * @param escrowId ID of the scrow for which a settlement was offered
     * @param blockTime Timestamp for when the offer was minted
     * @param latestSettlementOffer Splits [buyer's split, seller's split] as defined in the offer (in bips)
     * @param latestSettlementOfferBy address which sent the offer
     */
    event SettlementOffer(uint256 indexed escrowId, uint256 blockTime, uint16[2] latestSettlementOffer, address latestSettlementOfferBy);

    /**
     * @dev Settlement offer was approved and the escrow was settled and claimed
     * @param escrowId ID of the escrow
     * @param escrow Details of the escrow
     * @param latestSettlementOffer Splits (in bips) in the settlement offer that was approved
     * @param blockTime Timestamp of when the settlement was minted
     * @param amounts amounts (in token) sent to addresses that were eligible to any shares and fees from the escrow
     */
    event ApproveOffer(uint256 indexed escrowId, Escrow escrow, uint16[2] latestSettlementOffer,uint256 blockTime, uint256[5] amounts);

    /**
     * Constructor sets immutable references to the related Unicrow contracts
     */
    constructor(
        address unicrow_,
        address unicrowClaim_,
        address unicrowArbitrator_
    ) {
        unicrow = Unicrow(payable(unicrow_));
        unicrowClaim = IUnicrowClaim(payable(unicrowClaim_));
        unicrowArbitrator = IUnicrowArbitrator(unicrowArbitrator_);
    }

    /// @inheritdoc IUnicrowDispute
    function challenge(uint256 escrowId) external override nonReentrant {
        address sender = _msgSender();

        Escrow memory escrow = unicrow.getEscrow(escrowId);

        // Only the escrow's seller and buyer can challenge
        require(sender == escrow.seller || sender == escrow.buyer, "1-009");

        // The payment must be either in "Paid" or "Challenged" state
        require(
            escrow.consensus[WHO_SELLER] <= 0 ||
                escrow.consensus[WHO_BUYER] <= 0,
            "1-005"
        );

        // Check that the challenge period is running
        require(block.timestamp <= escrow.challengePeriodEnd, "1-016");
        require(block.timestamp > escrow.challengePeriodStart, "1-019");

        // Prevent reduntant challenge from seller's side
        require(
            sender != escrow.buyer ||
            escrow.consensus[WHO_BUYER] <= 0,
            "1-014"
        );

        // Prevent reduntant challenge from buyer's side
        require(
            sender != escrow.seller ||
            escrow.consensus[WHO_SELLER] <= 0,
            "1-015"
        );

        // Challenge does a few things:
        //   - sets split to 100/0% for the challenging party
        //   - sets the challenging party's consensus to positive and increases it by one
        //   - sets the challenged party consensus to negative
        // This way, if one of the parties has negative consensus, we know the payment is challenged
        //   and the absolute number keeps track of how many challenges have there been
        if (sender == escrow.buyer) {
            escrow.split[WHO_BUYER] = 10000;
            escrow.split[WHO_SELLER] = 0;
            escrow.consensus[WHO_BUYER] = abs8(escrow.consensus[WHO_BUYER]) + 1;
            escrow.consensus[WHO_SELLER] = -(abs8(escrow.consensus[WHO_SELLER]));
        } else if (sender == escrow.seller) {
            escrow.split[WHO_SELLER] = 10000;
            escrow.split[WHO_BUYER] = 0;
            escrow.consensus[WHO_BUYER] = -(abs8(escrow.consensus[WHO_BUYER]));
            escrow.consensus[WHO_SELLER] = abs8(escrow.consensus[WHO_SELLER]) + 1;
        }

        // The new challenge period starts at the end of the current period
        //   and is extended by the time set in the original payment
        uint64 periodStart = escrow.challengePeriodEnd;
        uint64 periodEnd = escrow.challengePeriodEnd + escrow.challengeExtension;

        // Execute the challenge in the main escrow contract
        unicrow.challenge(
            escrowId,
            escrow.split,
            escrow.consensus,
            periodStart,
            periodEnd
        );

        // Update the challenge periods for the returned event
        escrow.challengePeriodStart = periodStart;
        escrow.challengePeriodEnd = periodEnd;

        emit Challenge(escrowId, block.timestamp, escrow);
    }

    /// @inheritdoc IUnicrowDispute
    function offerSettlement(uint256 escrowId, uint16[2] calldata newSplit)
        external
        override
        nonReentrant
    {
        address sender = _msgSender();
        Escrow memory escrow = unicrow.getEscrow(escrowId);

        // Only buyer or seller can offer a settlement
        require(sender == escrow.buyer || sender == escrow.seller, "1-009");

        // Check that the payment has not been released, refunded, or settled already
        require(
            escrow.consensus[WHO_SELLER] <= 0 ||
                escrow.consensus[WHO_BUYER] <= 0,
            "1-005"
        );

        // Proposed splits should equal 100%
        require(newSplit[WHO_BUYER] + newSplit[WHO_SELLER] == 10000, "1-007");

        // Record the latest offer details
        latestSettlementOfferBy[escrowId] = sender;
        latestSettlementOffer[escrowId] = newSplit;

        emit SettlementOffer(escrowId, block.timestamp, newSplit, msg.sender);
    }

    /// @inheritdoc IUnicrowDispute
    function approveSettlement(
        uint256 escrowId,
        uint16[2] calldata validation
    ) external override {
        address sender = _msgSender();

        Escrow memory escrow = unicrow.getEscrow(escrowId);

        address latestSettlementOfferByAddress = latestSettlementOfferBy[escrowId];

        // Only buyer or seller can approve a settlement
        require(sender == escrow.buyer || sender == escrow.seller, "1-009");

        // Check that there's a prior settlement offer
        require(latestSettlementOfferByAddress != address(0), "1-017");

        // Only buyer can approve Seller's offer and vice versa
        require(sender != latestSettlementOfferByAddress, "1-020");

        uint16[2] memory latestOffer = latestSettlementOffer[escrowId];

        // Check that the splits sent for approval are the ones that were offered
        require(
            validation[WHO_BUYER] == latestOffer[WHO_BUYER] &&
            validation[WHO_SELLER] == latestOffer[WHO_SELLER],
            "1-018"
        );

        uint16[4] memory split = escrow.split;

        split[WHO_BUYER] = latestOffer[WHO_BUYER];
        split[WHO_SELLER] = latestOffer[WHO_SELLER];

        // Update buyer and seller consensus to positive numbers
        escrow.consensus[WHO_BUYER] = abs8(escrow.consensus[WHO_BUYER]) + 1;
        escrow.consensus[WHO_SELLER] = abs8(escrow.consensus[WHO_SELLER]);

        // Record the settlement in the main escrow contract
        unicrow.settle(
            escrowId,
            split,
            escrow.consensus
        );

        // Sent shares to all the parties and read the final amounts
        uint256[5] memory amounts = unicrowClaim.claim(escrowId);

        emit ApproveOffer(escrowId, escrow, latestOffer, block.timestamp, amounts);
    }

    /**
     * Get details about the latest settlement offer
     * @param escrowId Id of the escrow to get settlement offer details for
     * @return Returns zero values in the returned object's fields if there's been no offer
     */
    function getSettlementDetails(uint256 escrowId) external view returns (Settlement memory) {
       Settlement memory settlement = Settlement(latestSettlementOfferBy[escrowId], latestSettlementOffer[escrowId]);
       return settlement;
    }
}

uint16 constant _100_PCT_IN_BIPS = 10000;

// these constants are used as keys for consensus and split arrays
uint8 constant WHO_BUYER = 0;
uint8 constant WHO_SELLER = 1;
uint8 constant WHO_MARKETPLACE = 2;
uint8 constant WHO_PROTOCOL = 3;
uint8 constant WHO_ARBITRATOR = 4;

/// @dev This is how information about each escrow is stored int he main contract, mapped to escrowId
struct Escrow {
    /// @dev Who sent the payment
    address buyer;

    /// @dev By how much will the challenge period get extended after a challenge (in seconds)
    uint64 challengeExtension;

    /// @dev Whom is the payment for
    address seller;

    /// @dev When does/has the current challenge period start(ed) (seconds in Unix epoch)
    uint64 challengePeriodStart;

    /// @dev Address of a marketplace that has facilitated the trade (0x000...00 if none)
    address marketplace;

    /// @dev Fee for the marketplace (can be 0 even if a marketplace was set but doesn't charge fee)
    uint256 marketplaceFee;

    /// @dev When does the current challenge period end (seconds in Unix epoch)
    uint64 challengePeriodEnd;

    /// @dev Token used in the payment (0x00..00 for ETH)
    address currency;

    /// @dev True if the payment was already withdrawn from the escrow
    uint16 claimed;

    /**
     * @dev Indicates status of the payment from buyer's and seller's side.
     * Negative value means that party was challenged.
     * Examples for various states:
     *  0, 1: Paid - If the payment is claimed after challenge period ends, consensus remains like this
     *  1, 1: Released by buyer
     *  1,-1: 1x Challenged by buyer - If the payment is claimed after CP ends, consensus remains like this
     * -1, 2: 1x Challenged by buyer and 1x by Seller
     *  2,-2: 2x Challenged by buyer, 1x by seller
     *  3, 2: Released, Refunded, or Settled. Deduct 1 from each consensus number to calculate number of challenges
     */
    int16[2] consensus;

    /**
     * @dev Buyer's and Seller's share, and fees, in bips
     * Example of a new payment with 5% marketplace fee, 5% arbitrator fee: [0, 10000, 500, 500]
     * If the payment is refunded: [10000, 0, 0, 0]
     * If the payment is settled (e.g. 20% discount for the buyer): [8000, 2000, 500, 500]
     *
     * Note, that the sum of all splits can equal to more than 100% here.
     * The actual fees and shares are re-calculated when the payment is finally claimed
     */
    uint16[4] split;

    /// @dev amount in the token
    uint256 amount;
}

/// @dev Escrow parameters to be sent along with the deposit
struct EscrowInput {
    /// @dev who should receive the payment
    address seller;

    /// @dev address of a marketplace that has facilitated the payment
    address marketplace;

    /// @dev Fee for the marketplace (can be 0 even if a marketplace was set but doesn't charge fee)
    uint16 marketplaceFee;

    /// @dev Token used in the payment (0x00..00 for ETH)
    address currency;

    /// @dev Initial challenge period (in seconds)
    uint32 challengePeriod;

    /// @dev By how much will the challenge period get extended after a challenge (in seconds)
    uint32 challengeExtension;

    /// @dev Amount in token
    uint256 amount;
}

/// @dev Information about arbitrator proposed or assigned to an escrow.
/// @dev If both buyerConsensus and sellerConsensus are 1, the arbitrator is assigned, otherwise it's only been proposed by the party that has 1
struct Arbitrator {
    /// @dev Address of the arbitrator. 0x00..00 for no arbitrator
    address arbitrator;

    /// @dev Arbitrator's fee in bips. Can be 0
    uint16 arbitratorFee;

    /// @dev Seller's agreement on the arbitrator
    bool sellerConsensus;

    /// @dev Buyer's agreement on the arbitrator
    bool buyerConsensus;

    /// @dev Has the escrow been decided by the arbitrator
    bool arbitrated;
}

/// @dev Stores information about settlement, mapped to escrowId in UnicrowDispute contract
struct Settlement {
    /// @dev address of who sent the latest settlement offer. Returns 0x00..00 if no offer has been made
    address latestSettlementOfferBy;

    /// @dev how the payment was offered to be settled [buyer, seller] in bips
    uint16[2] latestSettlementOffer;
}

/// @dev Information about the token used in the payment is returned in this structure
struct Token {
    address address_;
    uint8 decimals;
    string symbol;
}

/// @dev Superstructure that includes all the information relevant to an escrow
struct Data {
    Escrow escrow;
    Arbitrator arbitrator;
    Settlement settlement;
    Token token;
}

function abs8(int16 x) pure returns (int16) {
    return x >= 0 ? x : -x;
}